#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=10) writeonly buffer sb010
{
	float dL_dW[];
};

layout(std430, set=0, binding=11) writeonly buffer sb011
{
	float dL_dB[];
};

layout(std430, set=0, binding=13) readonly buffer sb013
{
	uint param_disable_bias;
	uint param_stride;
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float X[];
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float dL_dY[];
};

float get_dY_dW(uint n, uint i, uint j, uint k)
{
	// X is dY_dW
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	dL_dW[n*sn + i*sy + j*sx + k] = v;
}

void set_dL_dB(uint n, float v)
{
	dL_dB[n] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

void backpropT_dL_dW_dB(uint f, uint fi, uint fj, uint k)
{
	float dl_dw = 0.0f;
	float dl_db = 0.0f;

	uint fh = dimW.height;
	uint fw = dimW.width;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint yh = dimY.height;
	uint yw = dimY.width;

	// virtual size
	uint vh = yh + 2*(fh/2);
	uint vw = yw + 2*(fw/2);

	// strided size
	uint sh = xh + (xh - 1)*(param_stride - 1);
	uint sw = xw + (xw - 1)*(param_stride - 1);

	// strided offset
	uint oi = (vh - sh)/2;
	uint oj = (vw - sw)/2;

	uint  m;
	uint  i;
	uint  j;
	int   ii;
	int   jj;
	float dl_dy;
	float dy_dw;
	float dy_db = 1.0;
	for(m = 0; m < bs; ++m)
	{
		for(i = 0; i < yh; ++i)
		{
			ii = int(i + fi) - int(oi);
			if((ii < 0) || (ii >= sh) ||
			    (umod(ii, param_stride) > 0))
			{
				continue;
			}
			ii = ii/int(param_stride);

			for(j = 0; j < yw; ++j)
			{
				jj = int(j + fj) - int(oj);
				if((jj < 0) || (jj >= sw) ||
				    (umod(jj, param_stride) > 0))
				{
					continue;
				}
				jj = jj/int(param_stride);

				dl_dy  = get_dL_dY(m, i, j, f);
				dy_dw  = get_dY_dW(m, ii, jj, k);
				dl_dw += dl_dy*dy_dw;
				dl_db += dl_dy*dy_db;
			}
		}
	}
	set_dL_dW(f, fi, fj, k, dl_dw);
	set_dL_dB(f, dl_db);
}

void main()
{
	// dispatch(RAW, fc, xd, 1, 8, 8, 1)
	uint f  = gl_GlobalInvocationID.x;
	uint k  = gl_GlobalInvocationID.y;
	uint fc = dimW.count;
	uint fh = dimW.height;
	uint fw = dimW.width;
	uint xd = dimX.depth;

	if((f >= fc) || (k >= xd))
	{
		return;
	}

	uint fi;
	uint fj;
	for(fi = 0; fi < fh; ++fi)
	{
		for(fj = 0; fj < fw; ++fj)
		{
			backpropT_dL_dW_dB(f, fi, fj, k);
		}
	}
}
