#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=5) readonly buffer sb005
{
	float Lh[];
};

layout(std430, set=0, binding=6) buffer sb006
{
	float dL_dT[];
};

layout(std430, set=0, binding=8) readonly buffer sb008
{
	int param_a;
	int param_fsw;
	int param_fsh;
	int param_fcw;
	int param_fch;
	int param_szw;
	int param_szh;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float dL_dY[];
};

layout(std430, set=2, binding=0) readonly buffer sb200
{
	uint idx_n;
};

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

float get_dY_dT(uint i, uint n)
{
	uint fch = param_fch;
	uint szh = param_szh;

	// dY_dT is Lh
	// dim(fch,1,1,szh)
	return Lh[umod(i, fch)*szh + n];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void add_dL_dT(uint n, uint i, uint j, uint k, float v)
{
	// dim(bs,xh,yw,xd)
	uint sn = dimX.height*dimY.width*dimX.depth;
	uint sy = dimY.width*dimX.depth;
	uint sx = dimX.depth;
	dL_dT[n*sn + i*sy + j*sx + k] += v;
}

void backprop_dL_dT(uint m, uint i, uint j)
{
	// https://github.com/jeffboody/Lanczos

	int   a    = param_a;
	int   fs   = param_fsh;
	int   xh   = int(dimX.height);
	uint  xd   = dimX.depth;
	int   yh   = int(dimY.height);
	int   n    = int(idx_n);
	float step = float(xh)/float(yh);
	float y    = (float(i) + 0.5)*step - 0.5;
	int   li   = -(fs*a) + 1 + n;
	int   ii   = int(floor(y)) + li;
	if((ii < 0) || (ii >= xh))
	{
		return;
	}

	float dy_dt = get_dY_dT(i, n);
	float dl_dy;
	float dl_dt;

	uint k;
	for(k = 0; k < xd; ++k)
	{
		dl_dy = get_dL_dY(m, i, j, k);
		dl_dt = dl_dy*dy_dt;
		add_dL_dT(m, uint(ii), j, k, dl_dt);
	}
}

void main()
{
	// dispatch required for each n
	// dispatch(RAW, bs, yh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint yh = dimY.height;
	uint yw = dimY.width;

	if((i >= yh) || (j >= yw))
	{
		return;
	}

	backprop_dL_dT(m, i, j);
}
