#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	nn_dim_t dimXhat;
};

layout(std430, set=0, binding=2) writeonly buffer sb02
{
	float Xhat[];
};

layout(std430, set=1, binding=0) readonly buffer sb10
{
	nn_dim_t dimX;
};

layout(std430, set=1, binding=1) readonly buffer sb11
{
	float X[];
};

layout(std430, set=1, binding=5) readonly buffer sb15
{
	float Xmean[];
};

layout(std430, set=1, binding=7) readonly buffer sb17
{
	float Xvar[];
};

void setXhat(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimXhat.height*dimXhat.width*dimXhat.depth;
	uint sy = dimXhat.width*dimXhat.depth;
	uint sx = dimXhat.depth;
	Xhat[n*sn + i*sy + j*sx + k] = v;
}

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float getXmean(uint n)
{
	return Xmean[n];
}

float getXvar(uint n)
{
	return Xvar[n];
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint xd = dimX.depth;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint  k;
	float xmean;
	float xvar;
	float x;
	float xhat;
	float epsilon = 0.00001;
	for(k = 0; k < xd; ++k)
	{
		xmean = getXmean(k);
		xvar  = getXvar(k);
		x     = getX(m, i, j, k);
		xhat  = (x - xmean)/(sqrt(xvar) + epsilon);
		setXhat(m, i, j, k, xhat);
	}
}
