#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) writeonly buffer sb001
{
	float X[];
};

layout(std430, set=0, binding=6) readonly buffer sb006
{
	uint  idx_n1;
	uint  idx_n2;
	uint  idx_n3;
	uint  idx_count;
	uint  idx_k1;
	uint  idx_k2;
	uint  idx_k3;
	uint  idx_depth;
	float idx_value;
};

void setX(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	X[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// hazard depends on use case
	// dispatch(hazard, count, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimX.height;
	uint xw = dimX.width;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint k;
	for(k = 0; k < idx_depth; ++k)
	{
		setX(idx_n1 + m, i, j, idx_k1 + k, idx_value);
	}
}
