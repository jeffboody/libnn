#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	nn_dim_t dimX;
	float    X[];
};

layout(std430, set=0, binding=3) buffer sb03
{
	nn_dim_t dimY;
	float    Y[];
};

layout(std430, set=0, binding=5) readonly buffer sb05
{
	nn_dim_t dimX2;
	float    X2[];
};

float getX1(uint n, uint i, uint j, uint k)
{
	// X1 is X
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float getX2(uint n, uint i, uint j, uint k)
{
	uint sn = dimX2.height*dimX2.width*dimX2.depth;
	uint sy = dimX2.width*dimX2.depth;
	uint sx = dimX2.depth;
	return X2[n*sn + i*sy + j*sx + k];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m   = gl_GlobalInvocationID.x;
	uint i   = gl_GlobalInvocationID.y;
	uint j   = gl_GlobalInvocationID.z;
	uint x1d = dimX.depth;
	uint x2d = dimX2.depth;

	if((i >= dimX.height) || (j >= dimX.width))
	{
		return;
	}

	uint k;
	for(k = 0; k < x1d; ++k)
	{
		float x1 = getX1(m, i, j, k);
		setY(m, i, j, k, x1);
	}

	for(k = 0; k < x2d; ++k)
	{
		float x2 = getX2(m, i, j, k);
		setY(m, i, j, x1d + k, x2);
	}
}
