#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=3) readonly buffer sb003
{
	float W[];
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=6) buffer sb006
{
	float dL_dH[];
};

layout(std430, set=0, binding=8) readonly buffer sb008
{
	uint param_stride;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float dL_dY[];
};

layout(std430, set=2, binding=0) readonly buffer sb200
{
	uint idx_n;
};

float get_dY_dH(uint n)
{
	// dY_dH is W
	return W[n];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void add_dL_dH(uint n, uint i, uint j, uint k, float v)
{
	// dim(bs,xh,yw,xd)
	uint sn = dimX.height*dimY.width*dimX.depth;
	uint sy = dimY.width*dimX.depth;
	uint sx = dimX.depth;
	dL_dH[n*sn + i*sy + j*sx + k] += v;
}

void backprop_dL_dH(uint m, uint i, uint j)
{
	uint xh = dimX.height;
	uint xd = dimX.depth;
	uint sz = dimW.count;
	uint n  = idx_n;

	int ii = int(param_stride*i + n) - int(sz/2);
	if((ii < 0) || (ii >= xh))
	{
		return;
	}

	float dy_dh = get_dY_dH(n);
	float dl_dy;
	float dl_dh;

	uint k;
	for(k = 0; k < xd; ++k)
	{
		dl_dy = get_dL_dY(m, i, j, k);
		dl_dh = dl_dy*dy_dh;
		add_dL_dH(m, ii, j, k, dl_dh);
	}
}

void main()
{
	// dispatch required for each n
	// dispatch(RAW, bs, yh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint yh = dimY.height;
	uint yw = dimY.width;

	if((i >= yh) || (j >= yw))
	{
		return;
	}

	backprop_dL_dH(m, i, j);
}
