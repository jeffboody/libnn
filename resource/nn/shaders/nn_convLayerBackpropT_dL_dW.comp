#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float dl_dw_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	nn_dim_t dimX;
	float    X[];
};

layout(std430, set=1, binding=0) readonly buffer sb10
{
	// dL_dY : dim(bs,yh,yw,fc)
	nn_dim_t dim_dL_dY;
	float    dL_dY[];
};

layout(std430, set=1, binding=1) buffer sb11
{
	// dL_dW : dim(fc,fh,fw,xd)
	nn_dim_t dim_dL_dW;
	float    dL_dW[];
};

layout(std430, set=1, binding=3) readonly buffer sb13
{
	nn_dim_t dim_dL_dX;
	float    dL_dX[];
};

layout(std430, set=2, binding=1) readonly buffer sb21
{
	uint param_bs;
	uint param_stride;
	uint param_disable_bias;
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	uint idx_f;
	uint idx_fi;
	uint idx_fj;
	uint idx_k;
};

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

float get_dY_dW(uint n, uint i, uint j, uint k)
{
	// X is dY_dW
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

void set_dL_dW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dL_dW.height*dim_dL_dW.width*dim_dL_dW.depth;
	uint sy = dim_dL_dW.width*dim_dL_dW.depth;
	uint sx = dim_dL_dW.depth;
	dL_dW[n*sn + i*sy + j*sx + k] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

void main()
{
	// dispatch required for each f,fi,fj,k
	// RAW hazzard handled by convLayerBpT_dL_dX
	// dispatch(NONE, 1, 1, 1, 8, 8, 1)
	uint q   = gl_GlobalInvocationID.x;
	uint p   = gl_GlobalInvocationID.y;
	uint yh  = dim_dL_dY.height;
	uint yw  = dim_dL_dY.width;
	uint fh  = dim_dL_dW.height;
	uint fw  = dim_dL_dW.width;
	uint xh  = dim_dL_dX.height;
	uint xw  = dim_dL_dX.width;
	uint idx = 8*p + q;
	uint f   = idx_f;
	uint fi  = idx_fi;
	uint fj  = idx_fj;
	uint k   = idx_k;

	// virtual size
	uint vh = yh + 2*(fh/2);
	uint vw = yw + 2*(fw/2);

	// strided size
	uint sh = xh + (xh - 1)*(param_stride - 1);
	uint sw = xw + (xw - 1)*(param_stride - 1);

	// strided offset
	uint oi = (vh - sh)/2;
	uint oj = (vw - sw)/2;

	// initialize dl_dw_work
	dl_dw_work[idx] = 0.0;

	// compute dl_dw_work
	uint m;
	uint i;
	uint j;
	int  ii;
	int  jj;
	float dl_dy;
	float dy_dw;
	for(m = 0; m < param_bs; ++m)
	{
		for(i = p; i < yh; i += 8)
		{
			ii = int(i) + int(fi) - int(oi);
			if((ii < 0) || (ii >= sh) ||
			    (umod(ii, param_stride) > 0))
			{
				return;
			}
			ii = ii/int(param_stride);

			for(j = q; j < yw; j += 8)
			{
				jj = int(j) + int(fj) - int(oj);
				if((jj < 0) || (jj >= sw) ||
				    (umod(jj, param_stride) > 0))
				{
					return;
				}
				jj = jj/int(param_stride);

				dl_dy = get_dL_dY(m, i, j, f);
				dy_dw = get_dY_dW(m, ii, jj, k);
				dl_dw_work[idx] += dl_dy*dy_dw;
			}
		}
	}

	// synchronize work
	memoryBarrierShared();
	barrier();

	// compute dl_dw
	if(idx == 0)
	{
		float dl_dw = 0.0;

		uint n;
		for(n = 0; n < 64; ++n)
		{
			dl_dw += dl_dw_work[n];
		}
		set_dL_dW(f, fi, fj, k, dl_dw);
	}
}
