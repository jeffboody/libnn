#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float min_work[64];
shared float max_work[64];
shared float sumx_work[64];
shared float sumxx_work[64];
shared float sumxm2_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	float X[];
};

layout (std430, set=1, binding=0) buffer sb10
{
	uint  stats_count;
	float stats_min;
	float stats_max;
	float stats_mean;
	float stats_stddev;
	float stats_norm;
};

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

void main()
{
	// hazard depends on use case
	// dispatch(hazard, 1, 1, 1, 8, 8, 1)
	uint p   = gl_GlobalInvocationID.x;
	uint q   = gl_GlobalInvocationID.y;
	uint xh  = dimX.height;
	uint xw  = dimX.width;
	uint xd  = dimX.depth;
	uint idx = 8*p + q;

	// initialize working variables
	min_work[idx]    = getX(0, 0, 0, 0);
	max_work[idx]    = min_work[idx];
	sumx_work[idx]   = 0.0;
	sumxx_work[idx]  = 0.0;
	sumxm2_work[idx] = 0.0;

	// compute working sums
	uint  m;
	uint  i;
	uint  j;
	uint  k;
	float x;
	for(m = 0; m < stats_count; ++m)
	{
		for(i = p; i < xh; i += 8)
		{
			for(j = q; j < xw; j += 8)
			{
				for(k = 0; k < xd; ++k)
				{
					x = getX(m, i, j, k);

					sumx_work[idx]  += x;
					sumxx_work[idx] += x*x;
					if(x < min_work[idx])
					{
						min_work[idx] = x;
					}
					if(x > max_work[idx])
					{
						max_work[idx] = x;
					}
				}
			}
		}
	}
	memoryBarrierShared();
	barrier();

	// compute final sums
	if(idx == 0)
	{
		float min    = min_work[0];
		float max    = max_work[0];
		float sumx   = 0.0;
		float sumxx  = 0.0;

		uint n;
		for(n = 0; n < 64; ++n)
		{
			sumx  += sumx_work[n];
			sumxx += sumxx_work[n];

			if(min_work[n] < min)
			{
				min = min_work[n];
			}

			if(max_work[n] > max)
			{
				max = max_work[n];
			}
		}

		stats_min  = min;
		stats_max  = max;
		stats_mean = sumx/float(stats_count*xh*xw*xd);
		stats_norm = sqrt(sumxx);
	}
	memoryBarrierBuffer();
	barrier();

	// compute working stddev
	float xm;
	for(m = 0; m < stats_count; ++m)
	{
		for(i = p; i < xh; i += 8)
		{
			for(j = q; j < xw; j += 8)
			{
				for(k = 0; k < xd; ++k)
				{
					xm = getX(m, i, j, k) - stats_mean;

					sumxm2_work[idx] += xm*xm;
				}
			}
		}
	}
	memoryBarrierShared();
	barrier();

	// compute final stddev
	if(idx == 0)
	{
		float sumxm2 = 0.0;

		uint n;
		for(n = 0; n < 64; ++n)
		{
			sumxm2 += sumxm2_work[n];
		}

		float var = sumxm2/float(stats_count*xh*xw*xd);
		stats_stddev = sqrt(var);
	}
}
