#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float dl_db_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=11) writeonly buffer sb011
{
	float dL_dB[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float dL_dY[];
};

layout(std430, set=2, binding=0) readonly buffer sb200
{
	uint idx_f;
	uint idx_fi;
	uint idx_fj;
	uint idx_k;
};

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dB(uint n, float v)
{
	dL_dB[n] = v;
}

void main()
{
	// dispatch required for each f
	// RAW hazard handled by nn_convLayer_backprop_dL_dX
	// dispatch(NONE, 1, 1, 1, 8, 8, 1)
	uint q   = gl_GlobalInvocationID.x;
	uint p   = gl_GlobalInvocationID.y;
	uint yh  = dimY.height;
	uint yw  = dimY.width;
	uint idx = 8*p + q;
	uint f   = idx_f;

	// initialize dl_db_work
	dl_db_work[idx] = 0.0;

	// compute dl_db_work
	uint m;
	uint i;
	uint j;
	float dy_db = 1.0;
	for(m = 0; m < bs; ++m)
	{
		for(i = p; i < yh; i += 8)
		{
			for(j = q; j < yw; j += 8)
			{
				dl_db_work[idx] += get_dL_dY(m, i, j, f)*dy_db;
			}
		}
	}
	memoryBarrierShared();
	barrier();

	// compute dl_db
	if(idx == 0)
	{
		float dl_db = 0.0;

		uint n;
		for(n = 0; n < 64; ++n)
		{
			dl_db += dl_db_work[n];
		}
		set_dL_dB(f, dl_db);
	}
}
