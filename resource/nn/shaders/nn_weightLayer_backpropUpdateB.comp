#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_learning_rate;
	float state_momentum_decay;
	float state_batch_momentum;
	float state_l2_lambda;
	float state_clip_max;
	float state_clip_momentum;
};

layout(std430, set=0, binding=6) readonly buffer sb06
{
	nn_dim_t dimB;
};

layout(std430, set=0, binding=7) buffer sb07
{
	float B[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	float gc_gcw;
	float gc_gcb;
	float gc_norm_dl_dw_ra;
	float gc_norm_dl_db_ra;
};

layout(std430, set=2, binding=6) readonly buffer sb26
{
	float dL_dB[];
};

layout(std430, set=2, binding=12) buffer sb212
{
	float VB[];
};

void addB(uint n, float v)
{
	B[n] += v;
}

float get_dL_dB(uint n)
{
	return dL_dB[n];
}

float getVB(uint n)
{
	return VB[n];
}

void setVB(uint n, float v)
{
	VB[n] = v;
}

void main()
{
	// RAW hazzard handled by nn_weightLayer_backpropUpdateW
	// dispatch(NONE, nc, 1, 1, 64, 1, 1)
	uint  nc = dimB.count;
	uint  n  = gl_GlobalInvocationID.x;
	float lr = state_learning_rate;
	float mu = state_momentum_decay;
	float s  = 1.0/(float(state_bs));

	if(n >= nc)
	{
		return;
	}

	float dl_db = s*get_dL_dB(n);

	// Nesterov Momentum Update
	float v0  = getVB(n);
	float v1  = mu*v0 - lr*gc_gcb*dl_db;
	setVB(n, v1);
	addB(n, -mu*v0 + (1.0 + mu)*v1);
}
