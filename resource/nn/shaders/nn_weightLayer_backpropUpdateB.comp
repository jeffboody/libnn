#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=3) buffer sb003
{
	float B[];
};

layout(std430, set=0, binding=8) buffer sb008
{
	float MB[];
};

layout(std430, set=0, binding=9) buffer sb009
{
	float VB[];
};

layout(std430, set=0, binding=11) readonly buffer sb011
{
	float dL_dB[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

float getB(uint n)
{
	return B[n];
}

void addB(uint n, float v)
{
	B[n] += v;
}

float get_dL_dB(uint n)
{
	return dL_dB[n];
}

float getMB(uint n)
{
	return MB[n];
}

void setMB(uint n, float v)
{
	MB[n] = v;
}

float getVB(uint n)
{
	return VB[n];
}

void setVB(uint n, float v)
{
	VB[n] = v;
}

void main()
{
	// RAW hazard handled by nn_weightLayer_backpropUpdateW
	// dispatch(NONE, nc, 1, 1, 64, 1, 1)
	uint nc = dimW.count;
	uint n  = gl_GlobalInvocationID.x;

	if(n >= nc)
	{
		return;
	}

	// Adam Update
	float alpha   = state_adam_alpha;
	float beta1   = state_adam_beta1;
	float beta2   = state_adam_beta2;
	float beta1t  = state_adam_beta1t;
	float beta2t  = state_adam_beta2t;
	float lambda  = state_adam_lambda;
	float nu      = state_adam_nu;
	float epsilon = 0.00001;
	float gt      = get_dL_dB(n);
	float mt      = beta1*getMB(n) + (1.0 - beta1)*gt;
	float vt      = beta2*getVB(n) + (1.0 - beta2)*gt*gt;
	float bt      = getB(n);
	float mt_hat  = mt/(1.0 - beta1t);
	float vt_hat  = vt/(1.0 - beta2t);
	setMB(n, mt);
	setVB(n, vt);
	addB(n, -nu*(alpha*mt_hat/(sqrt(vt_hat) + epsilon) +
	             lambda*bt));
}
