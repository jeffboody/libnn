#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_learning_rate;
	float state_momentum_decay;
	float state_batch_momentum;
	float state_l2_lambda;
	float state_clip_max;
	float state_clip_momentum;
};

layout(std430, set=0, binding=6) readonly buffer sb06
{
	nn_dim_t dimB;
};

layout(std430, set=0, binding=7) buffer sb07
{
	float B[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	float gc_gcw;
	float gc_gcb;
	float gc_norm_dl_dw_ra;
	float gc_norm_dl_db_ra;
};

layout(std430, set=2, binding=5) readonly buffer sb25
{
	nn_dim_t dim_dL_dB;
};

layout(std430, set=2, binding=6) readonly buffer sb26
{
	float dL_dB[];
};

layout(std430, set=2, binding=11) readonly buffer sb211
{
	nn_dim_t dimVB;
};

layout(std430, set=2, binding=12) buffer sb212
{
	float VB[];
};

float getB(uint n, uint i, uint j, uint k)
{
	uint sn = dimB.height*dimB.width*dimB.depth;
	uint sy = dimB.width*dimB.depth;
	uint sx = dimB.depth;
	return B[n*sn + i*sy + j*sx + k];
}

void addB(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimB.height*dimB.width*dimB.depth;
	uint sy = dimB.width*dimB.depth;
	uint sx = dimB.depth;
	B[n*sn + i*sy + j*sx + k] += v;
}

float get_dL_dB(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dB.height*dim_dL_dB.width*dim_dL_dB.depth;
	uint sy = dim_dL_dB.width*dim_dL_dB.depth;
	uint sx = dim_dL_dB.depth;
	return dL_dB[n*sn + i*sy + j*sx + k];
}

float getVB(uint n, uint i, uint j, uint k)
{
	uint sn = dimVB.height*dimVB.width*dimVB.depth;
	uint sy = dimVB.width*dimVB.depth;
	uint sx = dimVB.depth;
	return VB[n*sn + i*sy + j*sx + k];
}

void setVB(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimVB.height*dimVB.width*dimVB.depth;
	uint sy = dimVB.width*dimVB.depth;
	uint sx = dimVB.depth;
	VB[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// RAW hazzard handled by nn_convLayer_backpropUpdateW
	// dispatch(NONE, fc, 1, 1, 64, 1, 1)
	uint  fc = dimB.count;
	uint  f  = gl_GlobalInvocationID.x;
	float lr = state_learning_rate;
	float mu = state_momentum_decay;
	float s  = 1.0/(float(state_bs));

	if(f >= fc)
	{
		return;
	}

	float dl_db = s*get_dL_dB(f, 0, 0, 0);

	// Nesterov Momentum Update
	float v0  = getVB(f, 0, 0, 0);
	float v1  = mu*v0 - lr*gc_gcb*dl_db;
	setVB(f, 0, 0, 0, v1);
	addB(f, 0, 0, 0, -mu*v0 + (1.0 + mu)*v1);
}
