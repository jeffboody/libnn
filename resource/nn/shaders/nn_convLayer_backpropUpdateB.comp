#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_sgd_alpha;
	float state_sgd_beta1;
	float state_sgd_l2_lambda;
	float state_bn_momentum;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
	float state_lerp_s;
	float state_lerp_min;
	float state_lerp_max;
};

layout(std430, set=0, binding=6) readonly buffer sb06
{
	nn_dim_t dimB;
};

layout(std430, set=0, binding=7) buffer sb07
{
	float B[];
};

layout(std430, set=2, binding=5) readonly buffer sb25
{
	float dL_dB[];
};

layout(std430, set=2, binding=11) buffer sb211
{
	float VB[];
};

void addB(uint n, float v)
{
	B[n] += v;
}

float get_dL_dB(uint n)
{
	return dL_dB[n];
}

float getVB(uint n)
{
	return VB[n];
}

void setVB(uint n, float v)
{
	VB[n] = v;
}

void main()
{
	// RAW hazzard handled by nn_convLayer_backpropUpdateW
	// dispatch(NONE, fc, 1, 1, 64, 1, 1)
	uint  fc = dimB.count;
	uint  f  = gl_GlobalInvocationID.x;
	float s  = 1.0/(float(state_bs));

	if(f >= fc)
	{
		return;
	}

	float dl_db = s*get_dL_dB(f);

	// Nesterov Momentum Update
	float v0  = getVB(f);
	float v1  = state_sgd_beta1*v0 - state_sgd_alpha*dl_db;
	setVB(f, v1);
	addB(f, -state_sgd_beta1*v0 + (1.0 + state_sgd_beta1)*v1);
}
