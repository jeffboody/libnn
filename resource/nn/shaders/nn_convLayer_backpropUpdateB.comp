#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=3) buffer sb003
{
	float B[];
};

layout(std430, set=0, binding=8) buffer sb008
{
	float MB[];
};

layout(std430, set=0, binding=9) buffer sb009
{
	float VB[];
};

layout(std430, set=0, binding=11) readonly buffer sb011
{
	float dL_dB[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_bn_momentum;
};

float getB(uint n)
{
	return B[n];
}

void addB(uint n, float v)
{
	B[n] += v;
}

float get_dL_dB(uint n)
{
	return dL_dB[n];
}

float getMB(uint n)
{
	return MB[n];
}

void setMB(uint n, float v)
{
	MB[n] = v;
}

float getVB(uint n)
{
	return VB[n];
}

void setVB(uint n, float v)
{
	VB[n] = v;
}

void main()
{
	// dispatch(RAW, fc, 1, 1, 64, 1, 1)
	uint fc = dimW.count;
	uint f  = gl_GlobalInvocationID.x;

	if(f >= fc)
	{
		return;
	}

	// Adam Update
	float alpha   = state_adam_alpha;
	float beta1   = state_adam_beta1;
	float beta2   = state_adam_beta2;
	float beta1t  = state_adam_beta1t;
	float beta2t  = state_adam_beta2t;
	float epsilon = 0.00001;
	float g       = get_dL_dB(f);
	float m       = beta1*getMB(f) + (1.0 - beta1)*g;
	float v       = beta2*getVB(f) + (1.0 - beta2)*g*g;
	float b       = getB(f);
	float m_hat   = m/(1.0 - beta1t);
	float v_hat   = v/(1.0 - beta2t);
	setMB(f, m);
	setVB(f, v);
	addB(f, -alpha*m_hat/(sqrt(v_hat) + epsilon));
}
