#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=1) writeonly buffer sb001
{
	float dL_dY[];
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float Y[];
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float Yt[];
};

float getY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return Y[n*sn + i*sy + j*sx + k];
}

float getYt(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return Yt[n*sn + i*sy + j*sx + k];
}

void set_dL_dY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	dL_dY[n*sn + i*sy + j*sx + k] = v;
}

void dL_dY_mae(uint m, uint i, uint j, uint k)
{
	float epsilon = 0.00001;

	float y;
	float yt;
	float dy;
	float ady;
	float dl_dy;

	y     = getY(m, i, j, k);
	yt    = getYt(m, i, j, k);
	dy    = y - yt;
	ady   = abs(dy);
	dl_dy = dy/(ady + epsilon);
	set_dL_dY(m, i, j, k, dl_dy);
}

void main()
{
	// RAW hazard handled by nn_loss_mae
	// dispatch(NONE, bs, yh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint yh = dimY.height;
	uint yw = dimY.width;
	uint yd = dimY.depth;

	if((i >= yh) || (j >= yw))
	{
		return;
	}

	uint k;
	for(k = 0; k < yd; ++k)
	{
		dL_dY_mae(m, i, j, k);
	}
}
