#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) writeonly buffer sb001
{
	float Y[];
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float X[];
};

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

void forwardPassReLU(uint m, uint i, uint j, uint k)
{
	float y = getX(m, i, j, k);
	if(y < 0.0)
	{
		y = 0.0;
	}
	setY(m, i, j, k, y);
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint xd = dimX.depth;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		forwardPassReLU(m, i, j, k);
	}
}
