#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=4) readonly buffer sb04
{
	float G[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	nn_dim_t dim_dL_dXhat;
};

layout(std430, set=2, binding=1) writeonly buffer sb21
{
	float dL_dXhat[];
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=2, binding=3) readonly buffer sb23
{
	float dL_dY[];
};

float getG(uint n)
{
	return G[n];
}

void set_dL_dXhat(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dL_dXhat.height*dim_dL_dXhat.width*
	          dim_dL_dXhat.depth;
	uint sy = dim_dL_dXhat.width*dim_dL_dXhat.depth;
	uint sx = dim_dL_dXhat.depth;
	dL_dXhat[n*sn + i*sy + j*sx + k] = v;
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*
	          dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dim_dL_dY.height;
	uint xw = dim_dL_dY.width;
	uint xd = dim_dL_dY.depth;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint  k;
	float gamma;
	float dl_dy;
	float dl_dxhat;
	for(k = 0; k < xd; ++k)
	{
		gamma    = getG(k);
		dl_dy    = get_dL_dY(m, i, j, k);
		dl_dxhat = dl_dy*gamma;
		set_dL_dXhat(m, i, j, k, dl_dxhat);
	}
}
