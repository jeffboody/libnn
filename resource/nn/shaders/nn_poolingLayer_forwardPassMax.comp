#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	uint param_stride;
};

layout(std430, set=0, binding=2) readonly buffer sb02
{
	nn_dim_t dim_dY_dX;
};

layout(std430, set=0, binding=3) writeonly buffer sb03
{
	float dY_dX[];
};

layout(std430, set=1, binding=0) readonly buffer sb10
{
	nn_dim_t dimX;
};

layout(std430, set=1, binding=1) readonly buffer sb11
{
	float X[];
};

layout(std430, set=1, binding=2) readonly buffer sb12
{
	nn_dim_t dimY;
};

layout(std430, set=1, binding=3) writeonly buffer sb13
{
	float Y[];
};

void set_dY_dX(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dY_dX.height*dim_dY_dX.width*dim_dY_dX.depth;
	uint sy = dim_dY_dX.width*dim_dY_dX.depth;
	uint sx = dim_dY_dX.depth;
	dY_dX[n*sn + i*sy + j*sx + k] = v;
}

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

void forwardPassMax(uint m, uint i, uint j, uint k)
{
	// compute range
	uint xh  = dimX.height;
	uint xw  = dimX.width;
	uint ii0 = param_stride*i;
	uint jj0 = param_stride*j;
	uint ii1 = ii0 + param_stride;
	uint jj1 = jj0 + param_stride;
	if(ii1 > xh)
	{
		ii1 = xh;
	}

	if(jj1 > xw)
	{
		jj1 = xw;
	}

	// initialize max value
	float x;
	float xmax  = getX(m, ii0, jj0, k);
	uint  iimax = ii0;
	uint  jjmax = jj0;

	// find max value in tile
	uint ii;
	uint jj;
	for(ii = ii0; ii < ii1; ++ii)
	{
		for(jj = jj0; jj < jj1; ++jj)
		{
			x = getX(m, ii, jj, k);
			if(x > xmax)
			{
				xmax  = x;
				iimax = ii;
				jjmax = jj;
			}
		}
	}

	// output
	setY(m, i, j, k, xmax);

	// forward gradients
	set_dY_dX(m, iimax, jjmax, k, 1.0);
}

void main()
{
	// dispatch(RAW, bs, yh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint yh = dimY.height;
	uint yw = dimY.width;
	uint xd = dim_dY_dX.count;

	if((i >= yh) || (j >= yw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		forwardPassMax(m, i, j, k);
	}
}
