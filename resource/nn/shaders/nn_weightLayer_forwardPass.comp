#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	float W[];
};

layout(std430, set=0, binding=3) readonly buffer sb003
{
	float B[];
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=5) writeonly buffer sb005
{
	float Y[];
};

layout(std430, set=0, binding=13) readonly buffer sb013
{
	uint param_disable_bias;
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float X[];
};

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float getW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

float getB(uint n)
{
	return B[n];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

void main()
{
	// dispatch(RAW, bs*nc, 1, 1, 64, 1, 1)
	uint i  = gl_GlobalInvocationID.x;
	uint nc = dimW.count;
	uint m  = i/nc;
	uint n  = umod(i, nc);

	if(m >= bs)
	{
		return;
	}

	// initialize y
	float y;
	if(param_disable_bias > 0)
	{
		y = 0.0;
	}
	else
	{
		y = getB(n);
	}

	// compute weighted sum
	uint  k;
	float w;
	float x;
	uint  xd = dimX.depth;
	for(k = 0; k < xd; ++k)
	{
		x  = getX(m, 0, 0, k);
		w  = getW(n, 0, 0, k);
		y += w*x;
	}
	setY(m, 0, 0, n, y);
}
