#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_learning_rate;
	float state_momentum_decay;
	float state_batch_momentum;
	float state_l2_lambda;
	float state_clip_max;
	float state_clip_momentum;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	uint param_disable_bias;
};

layout(std430, set=0, binding=2) readonly buffer sb02
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=3) readonly buffer sb03
{
	float X[];
};

layout(std430, set=0, binding=4) readonly buffer sb04
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=5) readonly buffer sb05
{
	float W[];
};

layout(std430, set=0, binding=6) readonly buffer sb06
{
	nn_dim_t dimB;
};

layout(std430, set=0, binding=7) readonly buffer sb07
{
	float B[];
};

layout(std430, set=1, binding=0) readonly buffer sb10
{
	nn_dim_t dimY;
};

layout(std430, set=1, binding=1) writeonly buffer sb11
{
	float Y[];
};

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float getW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

float getB(uint n, uint i, uint j, uint k)
{
	uint sn = dimB.height*dimB.width*dimB.depth;
	uint sy = dimB.width*dimB.depth;
	uint sx = dimB.depth;
	return B[n*sn + i*sy + j*sx + k];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

void main()
{
	// dispatch(RAW, bs*nc, 1, 1, 64, 1, 1)
	uint i  = gl_GlobalInvocationID.x;
	uint nc = dimW.count;
	uint m  = i/nc;
	uint n  = umod(i, nc);

	if(m >= state_bs)
	{
		return;
	}

	// initialize y
	float y;
	if(param_disable_bias > 0)
	{
		y = 0.0;
	}
	else
	{
		y = getB(n, 0, 0, 0);
	}

	// compute weighted sum
	uint  k;
	float w;
	float x;
	uint  xd = dimX.depth;
	for(k = 0; k < xd; ++k)
	{
		x  = getX(m, 0, 0, k);
		w  = getW(n, 0, 0, k);
		y += w*x;
	}
	setY(m, 0, 0, n, y);
}
