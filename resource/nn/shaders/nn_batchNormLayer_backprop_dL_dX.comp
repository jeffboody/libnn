#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
	float state_lerp_s;
	float state_lerp_min;
	float state_lerp_max;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	nn_dim_t dimXhat;
};

layout(std430, set=0, binding=2) readonly buffer sb02
{
	float Xhat[];
};

layout(std430, set=0, binding=7) readonly buffer sb07
{
	nn_dim_t dimXvar_mb;
};

layout(std430, set=0, binding=8) readonly buffer sb08
{
	float Xvar_mb[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	nn_dim_t dim_dL_dXhat;
};

layout(std430, set=2, binding=1) readonly buffer sb21
{
	float dL_dXhat[];
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=2, binding=3) buffer sb23
{
	float dL_dY[];
};

layout(std430, set=2, binding=4) readonly buffer sb24
{
	nn_dim_t dimBsum;
};

layout(std430, set=2, binding=5) readonly buffer sb25
{
	float Bsum[];
};

layout(std430, set=2, binding=6) readonly buffer sb26
{
	nn_dim_t dimCsum;
};

layout(std430, set=2, binding=7) readonly buffer sb27
{
	float Csum[];
};

float getXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dimXhat.height*dimXhat.width*dimXhat.depth;
	uint sy = dimXhat.width*dimXhat.depth;
	uint sx = dimXhat.depth;
	return Xhat[n*sn + i*sy + j*sx + k];
}

float getXvar_mb(uint n)
{
	return Xvar_mb[n];
}

float get_dL_dXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dXhat.height*dim_dL_dXhat.width*
	          dim_dL_dXhat.depth;
	uint sy = dim_dL_dXhat.width*dim_dL_dXhat.depth;
	uint sx = dim_dL_dXhat.depth;
	return dL_dXhat[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dX(uint n, uint i, uint j, uint k, float v)
{
	// dL_dX replaces dL_dY
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	dL_dY[n*sn + i*sy + j*sx + k] = v;
}

float getBsum(uint n)
{
	return Bsum[n];
}

float getCsum(uint n)
{
	return Csum[n];
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimXhat.height;
	uint xw = dimXhat.width;
	uint xd = dimXhat.depth;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint  k;
	float xhat;
	float xvar;
	float dl_dxhat;
	float a;
	float b;
	float c;
	float d;
	float dl_dx;
	float epsilon = 0.00001;
	float M       = float(state_bs)*float(xh)*float(xw);
	for(k = 0; k < xd; ++k)
	{
		xhat     = getXhat(m, i, j, k);
		xvar     = getXvar_mb(k);
		dl_dxhat = get_dL_dXhat(m, i, j, k);
		a        = M*dl_dxhat;
		b        = getBsum(k);
		c        = getCsum(k);
		d        = M*sqrt(xvar + epsilon);
		dl_dx    = (a - b - xhat*c)/d;
		set_dL_dX(m, i, j, k, dl_dx);
	}
}
