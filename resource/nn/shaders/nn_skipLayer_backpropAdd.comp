#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	float param_skip_beta;
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=2, binding=1) readonly buffer sb21
{
	float dL_dY[];
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	nn_dim_t dim_dL_dX;
};

layout(std430, set=2, binding=3) writeonly buffer sb23
{
	float dL_dX[];
};

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dX1(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dL_dX.height*dim_dL_dX.width*dim_dL_dX.depth;
	uint sy = dim_dL_dX.width*dim_dL_dX.depth;
	uint sx = dim_dL_dX.depth;
	dL_dX[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dim_dL_dX.height;
	uint xw = dim_dL_dX.width;
	uint xd = dim_dL_dX.depth;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint  k;
	float dl_dy;
	float dy_dx1 = param_skip_beta;
	for(k = 0; k < xd; ++k)
	{
		dl_dy = get_dL_dY(m, i, j, k);
		set_dL_dX1(m, i, j, k, dl_dy*dy_dx1);
	}
}
