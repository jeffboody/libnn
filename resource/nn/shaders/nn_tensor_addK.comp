#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimSrc1;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	float Src1[];
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	nn_dim_t dimSrc2;
};

layout(std430, set=0, binding=3) readonly buffer sb003
{
	float Src2[];
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimDst;
};

layout(std430, set=0, binding=5) writeonly buffer sb005
{
	float Dst[];
};

layout(std430, set=0, binding=6) readonly buffer sb006
{
	uint  idx_n1;
	uint  idx_n2;
	uint  idx_n3;
	uint  idx_count;
	uint  idx_k1;
	uint  idx_k2;
	uint  idx_k3;
	uint  idx_depth;
	float idx_value;
};

float getSrc1(uint n, uint i, uint j, uint k)
{
	uint sn = dimSrc1.height*dimSrc1.width*dimSrc1.depth;
	uint sy = dimSrc1.width*dimSrc1.depth;
	uint sx = dimSrc1.depth;
	return Src1[n*sn + i*sy + j*sx + k];
}

float getSrc2(uint n, uint i, uint j, uint k)
{
	uint sn = dimSrc2.height*dimSrc2.width*dimSrc2.depth;
	uint sy = dimSrc2.width*dimSrc2.depth;
	uint sx = dimSrc2.depth;
	return Src2[n*sn + i*sy + j*sx + k];
}

void setDst(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimDst.height*dimDst.width*dimDst.depth;
	uint sy = dimDst.width*dimDst.depth;
	uint sx = dimDst.depth;
	Dst[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// hazard depends on use case
	// dispatch(hazard, count, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimSrc1.height;
	uint xw = dimSrc1.width;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	float src1;
	float src2;
	uint  k;
	for(k = 0; k < idx_depth; ++k)
	{
		src1 = getSrc1(idx_n1 + m, i, j, idx_k1 + k);
		src2 = getSrc2(idx_n2 + m, i, j, idx_k2 + k);
		setDst(idx_n3 + m, i, j, idx_k3 + k, src1 + src2);
	}
}
