#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	float T[];
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=3) writeonly buffer sb003
{
	float Y[];
};

layout(std430, set=0, binding=5) readonly buffer sb005
{
	float Lh[];
};

layout(std430, set=0, binding=8) readonly buffer sb008
{
	int param_a;
	int param_fsw;
	int param_fsh;
	int param_fcw;
	int param_fch;
	int param_szw;
	int param_szh;
};

float getT(uint n, uint i, uint j, uint k)
{
	// dim(bs,xh,yw,xd)
	uint sn = dimX.height*dimY.width*dimX.depth;
	uint sy = dimY.width*dimX.depth;
	uint sx = dimX.depth;
	return T[n*sn + i*sy + j*sx + k];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

float getLh(uint i, uint n)
 {
	uint fch = param_fch;
	uint szh = param_szh;

	// dim(fch,1,1,szh)
	return Lh[umod(i, fch)*szh + n];
}

void forwardPassY(uint m, uint i, uint j, uint k)
{
	// https://github.com/jeffboody/Lanczos

	int   ii;
	int   li;
	int   a  = param_a;
	int   fs = param_fsh;
	int   n  = 0;
	int   xh = int(dimX.height);
	int   yh = int(dimY.height);
	float lh;
	float s1;
	float s2   = 0.0;
	float step = float(xh)/float(yh);
	float y    = (float(i) + 0.5)*step - 0.5;
	for(li = -(fs*a) + 1; li <= (fs*a); ++li)
	{
		ii = int(floor(y)) + li;
		if((ii < 0) || (ii >= xh))
		{
			++n;
			continue;
		}

		s1  = getT(m, uint(ii), j, k);
		lh  = getLh(i, n);
		s2 += s1*lh;

		++n;
	}
	setY(m, i, j, k, s2);
}

void main()
{
	// dispatch(RAW, bs, yh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint yh = dimY.height;
	uint yw = dimY.width;
	uint xd = dimX.depth;

	if((i >= yh) || (j >= yw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		forwardPassY(m, i, j, k);
	}
}
