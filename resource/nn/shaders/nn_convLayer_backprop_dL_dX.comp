#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	float W[];
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=12) buffer sb012
{
	float dL_dX[];
};

layout(std430, set=0, binding=13) readonly buffer sb013
{
	uint param_disable_bias;
	uint param_stride;
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float dL_dY[];
};

layout(std430, set=2, binding=0) readonly buffer sb200
{
	uint idx_f;
	uint idx_fi;
	uint idx_fj;
	uint idx_k;
};

float get_dY_dX(uint n, uint i, uint j, uint k)
{
	// dY_dX is W
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void add_dL_dX(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	dL_dX[n*sn + i*sy + j*sx + k] += v;
}

void backprop_dL_dX(uint m, uint i, uint j, uint k)
{
	uint fc = dimW.count;
	uint fh = dimW.height;
	uint fw = dimW.width;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint fi = idx_fi;
	uint fj = idx_fj;

	int ii = int(param_stride*i + fi) - int(fh/2);
	if((ii < 0) || (ii >= xh))
	{
		return;
	}

	int jj = int(param_stride*j + fj) - int(fw/2);
	if((jj < 0) || (jj >= xw))
	{
		return;
	}

	float dy_dx;
	float dl_dy;
	float dl_dx = 0.0;
	uint  f;
	for(f = 0; f < fc; ++f)
	{
		dl_dy  = get_dL_dY(m, i, j, f);
		dy_dx  = get_dY_dX(f, fi, fj, k);
		dl_dx += dl_dy*dy_dx;
	}

	add_dL_dX(m, ii, jj, k, dl_dx);
}

void main()
{
	// dispatch required for each fi,fj
	// dispatch(RAW, bs, yh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint yh = dimY.height;
	uint yw = dimY.width;
	uint xd = dimW.depth;

	if((i >= yh) || (j >= yw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		backprop_dL_dX(m, i, j, k);
	}
}
