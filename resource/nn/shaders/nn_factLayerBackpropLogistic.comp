#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	nn_dim_t dimX;
	float    X[];
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	nn_dim_t dimW;
	float    W[];
};

layout(std430, set=1, binding=0) buffer sb10
{
	nn_dim_t dim_dL_dY;
	float    dL_dY[];
};

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

void mul_dL_dY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	dL_dY[n*sn + i*sy + j*sx + k] *= v;
}

void backpropLogistic(uint m, uint i, uint j, uint k)
{
	float x     = getX(m, i, j, k);
	float fx    = 1.0/(1.0 + exp(-x));
	float dy_dx = fx*(1.0 - fx);

	// dL_dY replaced by dL_dX
	mul_dL_dY(m, i, j, k, dy_dx);
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xd = dimW.depth;

	if((i >= dimX.height) || (j >= dimX.width))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		backpropLogistic(m, i, j, k);
	}
}
