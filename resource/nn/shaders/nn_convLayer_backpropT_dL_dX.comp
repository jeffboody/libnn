#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	float W[];
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=12) writeonly buffer sb012
{
	float dL_dX[];
};

layout(std430, set=0, binding=13) readonly buffer sb013
{
	uint param_disable_bias;
	uint param_stride;
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float dL_dY[];
};

float get_dY_dX(uint n, uint i, uint j, uint k)
{
	// dY_dX is W
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dX(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	dL_dX[n*sn + i*sy + j*sx + k] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

void backpropT_dL_dX(uint m, uint ii, uint jj, uint k)
{
	float dl_dx = 0.0;

	uint fc = dimW.count;
	uint fh = dimW.height;
	uint fw = dimW.width;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint yh = dimY.height;
	uint yw = dimY.width;

	// virtual size
	uint vh = yh + 2*(fh/2);
	uint vw = yw + 2*(fw/2);

	// strided size
	uint sh = xh + (xh - 1)*(param_stride - 1);
	uint sw = xw + (xw - 1)*(param_stride - 1);

	// strided offset
	uint oi = (vh - sh)/2;
	uint oj = (vw - sw)/2;

	uint  fi;
	uint  fj;
	uint  f;
	int   i;
	int   j;
	float dl_dy;
	float dy_dx;
	for(fi = 0; fi < fh; ++fi)
	{
		i = int(ii)*int(param_stride) + int(oi) - int(fi);
		if(i < 0)
		{
			i = 0;
		}
		else if(i >= yh)
		{
			i = int(yh) - 1;
		}

		for(fj = 0; fj < fw; ++fj)
		{
			j = int(jj)*int(param_stride) + int(oj) - int(fj);
			if(j < 0)
			{
				j = 0;
			}
			else if(j >= yw)
			{
				j = int(yw) - 1;
			}

			for(f = 0; f < fc; ++f)
			{
				dl_dy  = get_dL_dY(m, i, j, f);
				dy_dx  = get_dY_dX(f, fi, fj, k);
				dl_dx += dl_dy*dy_dx;
			}
		}
	}
	set_dL_dX(m, ii, jj, k, dl_dx);
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint ii = gl_GlobalInvocationID.y;
	uint jj = gl_GlobalInvocationID.z;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint xd = dimX.depth;

	if((ii >= xh) || (jj >= xw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		backpropT_dL_dX(m, ii, jj, k);
	}
}
