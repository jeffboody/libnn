#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
};

layout(std430, set=1, binding=0) readonly buffer sb10
{
	nn_dim_t dimXd;
};

layout(std430, set=1, binding=1) writeonly buffer sb11
{
	float Xd[];
};

layout(std430, set=1, binding=2) readonly buffer sb12
{
	nn_dim_t dimCg;
};

layout(std430, set=1, binding=3) readonly buffer sb13
{
	float Cg[];
};

layout(std430, set=1, binding=4) readonly buffer sb14
{
	nn_dim_t dimCr;
};

layout(std430, set=1, binding=5) readonly buffer sb15
{
	float Cr[];
};

layout(std430, set=1, binding=6) readonly buffer sb16
{
	nn_dim_t dimYg;
};

layout(std430, set=1, binding=7) readonly buffer sb17
{
	float Yg[];
};

layout(std430, set=1, binding=8) readonly buffer sb18
{
	nn_dim_t dimYtr;
};

layout(std430, set=1, binding=9) readonly buffer sb19
{
	float Ytr[];
};

void setXd(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimXd.height*dimXd.width*dimXd.depth;
	uint sy = dimXd.width*dimXd.depth;
	uint sx = dimXd.depth;
	Xd[n*sn + i*sy + j*sx + k] = v;
}

float getCg(uint n, uint i, uint j, uint k)
{
	uint sn = dimCg.height*dimCg.width*dimCg.depth;
	uint sy = dimCg.width*dimCg.depth;
	uint sx = dimCg.depth;
	return Cg[n*sn + i*sy + j*sx + k];
}

float getCr(uint n, uint i, uint j, uint k)
{
	uint sn = dimCr.height*dimCr.width*dimCr.depth;
	uint sy = dimCr.width*dimCr.depth;
	uint sx = dimCr.depth;
	return Cr[n*sn + i*sy + j*sx + k];
}

float getYg(uint n, uint i, uint j, uint k)
{
	uint sn = dimYg.height*dimYg.width*dimYg.depth;
	uint sy = dimYg.width*dimYg.depth;
	uint sx = dimYg.depth;
	return Yg[n*sn + i*sy + j*sx + k];
}

float getYtr(uint n, uint i, uint j, uint k)
{
	uint sn = dimYtr.height*dimYtr.width*dimYtr.depth;
	uint sy = dimYtr.width*dimYtr.depth;
	uint sx = dimYtr.depth;
	return Ytr[n*sn + i*sy + j*sx + k];
}

void main()
{
	// dispatch(RAW, bs/2, xh, xw, 1, 8, 8)
	// compute Xd=(Ytr|Cr,Yg|Cg)
	uint m   = gl_GlobalInvocationID.x;
	uint i   = gl_GlobalInvocationID.y;
	uint j   = gl_GlobalInvocationID.z;
	uint xh  = dimXd.height;
	uint xw  = dimXd.width;
	uint yd  = dimYg.depth;
	uint cd  = dimCg.depth;
	uint bs2 = state_bs; // G state_bs is bs2

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	float v;
	uint  k;
	for(k = 0; k < yd; ++k)
	{
		v = getYtr(m, i, j, k);
		setXd(m, i, j, k, v);
	}

	for(k = 0; k < cd; ++k)
	{
		v = getCr(m, i, j, k);
		setXd(m, i, j, k + yd, v);
	}

	for(k = 0; k < yd; ++k)
	{
		v = getYg(m, i, j, k);
		setXd(m + bs2, i, j, k, v);
	}

	for(k = 0; k < cd; ++k)
	{
		v = getCg(m, i, j, k);
		setXd(m + bs2, i, j, k + yd, v);
	}
}
