#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float bsum_work[64];
shared float csum_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=3) readonly buffer sb003
{
	float Xhat[];
};

layout(std430, set=0, binding=13) readonly buffer sb013
{
	float dL_dXhat[];
};

layout(std430, set=0, binding=14) writeonly buffer sb014
{
	float Bsum[];
};

layout(std430, set=0, binding=15) writeonly buffer sb015
{
	float Csum[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

layout(std430, set=2, binding=0) readonly buffer sb200
{
	uint idx_k;
};

float getXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return Xhat[n*sn + i*sy + j*sx + k];
}

float get_dL_dXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*
	          dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return dL_dXhat[n*sn + i*sy + j*sx + k];
}

void setBsum(uint n, float v)
{
	Bsum[n] = v;
}

void setCsum(uint n, float v)
{
	Csum[n] = v;
}

void main()
{
	// dispatch required for each k
	// dispatch((k == 0) ? RAW : NONE, 1, 1, 1, 8, 8, 1)
	uint p   = gl_GlobalInvocationID.x;
	uint q   = gl_GlobalInvocationID.y;
	uint xh  = dimX.height;
	uint xw  = dimX.width;
	uint idx = 8*p + q;
	uint k   = idx_k;

	// initialize working sums
	bsum_work[idx] = 0.0;
	csum_work[idx] = 0.0;

	// compute working sums
	uint  m;
	uint  i;
	uint  j;
	float xhat;
	float dl_dxhat;
	for(m = 0; m < bs; ++m)
	{
		for(i = p; i < xh; i += 8)
		{
			for(j = q; j < xw; j += 8)
			{
				xhat             = getXhat(m, i, j, k);
				dl_dxhat         = get_dL_dXhat(m, i, j, k);
				bsum_work[idx]  += dl_dxhat;
				csum_work[idx]  += dl_dxhat*xhat;
			}
		}
	}
	memoryBarrierShared();
	barrier();

	// compute final sums
	if(idx == 0)
	{
		float bsum = 0.0;
		float csum = 0.0;

		uint n;
		for(n = 0; n < 64; ++n)
		{
			bsum += bsum_work[n];
			csum += csum_work[n];
		}
		setBsum(k, bsum);
		setCsum(k, csum);
	}
}
