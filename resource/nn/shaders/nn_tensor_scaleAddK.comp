#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX1;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	float X1[];
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	nn_dim_t dimX2;
};

layout(std430, set=0, binding=3) readonly buffer sb003
{
	float X2[];
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=5) writeonly buffer sb005
{
	float Y[];
};

layout(std430, set=0, binding=6) readonly buffer sb006
{
	uint  idx_x1n;
	uint  idx_x2n;
	uint  idx_yn;
	uint  idx_count;
	uint  idx_x1k;
	uint  idx_x2k;
	uint  idx_yk;
	uint  idx_depth;
	float idx_value;
};

float getX1(uint n, uint i, uint j, uint k)
{
	uint sn = dimX1.height*dimX1.width*dimX1.depth;
	uint sy = dimX1.width*dimX1.depth;
	uint sx = dimX1.depth;
	return X1[n*sn + i*sy + j*sx + k];
}

float getX2(uint n, uint i, uint j, uint k)
{
	uint sn = dimX2.height*dimX2.width*dimX2.depth;
	uint sy = dimX2.width*dimX2.depth;
	uint sx = dimX2.depth;
	return X2[n*sn + i*sy + j*sx + k];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// hazard depends on use case
	// dispatch(hazard, count, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimX1.height;
	uint xw = dimX1.width;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	float s = idx_value;
	float x1;
	float x2;
	uint  k;
	for(k = 0; k < idx_depth; ++k)
	{
		x1 = getX1(idx_x1n + m, i, j, idx_x1k + k);
		x2 = getX2(idx_x2n + m, i, j, idx_x2k + k);
		setY(idx_yn + m, i, j, idx_yk + k, s*x1 + x2);
	}
}
