#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=2) readonly buffer sb02
{
	float Y[];
};

layout(std430, set=0, binding=3) readonly buffer sb03
{
	nn_dim_t dimYt;
};

layout(std430, set=0, binding=4) readonly buffer sb04
{
	float Yt[];
};

layout(std430, set=0, binding=5) readonly buffer sb05
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=0, binding=6) writeonly buffer sb06
{
	float dL_dY[];
};

float getY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return Y[n*sn + i*sy + j*sx + k];
}

float getYt(uint n, uint i, uint j, uint k)
{
	uint sn = dimYt.height*dimYt.width*dimYt.depth;
	uint sy = dimYt.width*dimYt.depth;
	uint sx = dimYt.depth;
	return Yt[n*sn + i*sy + j*sx + k];
}

void set_dL_dY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	dL_dY[n*sn + i*sy + j*sx + k] = v;
}

void dL_dY_bce(uint m, uint i, uint j, uint k)
{
	float epsilon = 0.00001;

	float y;
	float yt;
	float dl_dy;

	y     = getY(m, i, j, k);
	y     = clamp(y, epsilon, 1.0 - epsilon);
	yt    = getYt(m, i, j, k);
	dl_dy = -(y - yt)/(log(10.0)*(y - 1.0)*y + epsilon);
	set_dL_dY(m, i, j, k, dl_dy);
}

void main()
{
	// dispatch(RAW, bs, yh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint yd = dimY.depth;

	if((i >= dimY.height) || (j >= dimY.width))
	{
		return;
	}

	uint k;
	for(k = 0; k < yd; ++k)
	{
		dL_dY_bce(m, i, j, k);
	}
}
