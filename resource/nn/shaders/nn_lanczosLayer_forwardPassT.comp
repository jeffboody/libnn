#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) writeonly buffer sb001
{
	float T[];
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	float Lw[];
};

layout(std430, set=0, binding=8) readonly buffer sb008
{
	int param_a;
	int param_fsw;
	int param_fsh;
	int param_fcw;
	int param_fch;
	int param_szw;
	int param_szh;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float X[];
};

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

void setT(uint n, uint i, uint j, uint k, float v)
{
	// dim(bs,xh,yw,xd)
	uint sn = dimX.height*dimY.width*dimX.depth;
	uint sy = dimY.width*dimX.depth;
	uint sx = dimX.depth;
	T[n*sn + i*sy + j*sx + k] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

float getLw(uint j, uint n)
{
	uint fcw = param_fcw;
	uint szw = param_szw;

	// dim(fcw,1,1,szw)
	return Lw[umod(j, fcw)*szw + n];
}

void forwardPassT(uint m, uint i, uint j, uint k)
{
	// https://github.com/jeffboody/Lanczos

	int   jj;
	int   lj;
	int   a  = param_a;
	int   fs = param_fsw;
	int   n  = 0;
	int   xw = int(dimX.width);
	int   yw = int(dimY.width);
	float lw;
	float s1;
	float s2   = 0.0;
	float step = float(xw)/float(yw);
	float x    = (float(j) + 0.5)*step - 0.5;
	for(lj = -(fs*a) + 1; lj <= (fs*a); ++lj)
	{
		jj = int(floor(x)) + lj;
		if(jj < 0)
		{
			jj = 0;
		}
		else if(jj >= xw)
		{
			jj = xw - 1;
		}

		s1  = getX(m, i, uint(jj), k);
		lw  = getLw(j, n);
		s2 += s1*lw;

		++n;
	}
	setT(m, i, j, k, s2);
}

void main()
{
	// dispatch(RAW, bs, xh, yw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimX.height;
	uint yw = dimY.width;
	uint xd = dimX.depth;

	if((i >= xh) || (j >= yw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		forwardPassT(m, i, j, k);
	}
}
