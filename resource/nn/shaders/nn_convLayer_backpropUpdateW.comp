#version 450

layout (local_size_x=4, local_size_y=4, local_size_z=4) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=2) buffer sb002
{
	float W[];
};

layout(std430, set=0, binding=6) buffer sb006
{
	float MW[];
};

layout(std430, set=0, binding=7) buffer sb007
{
	float VW[];
};

layout(std430, set=0, binding=10) readonly buffer sb010
{
	float dL_dW[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

float getW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

void addW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	W[n*sn + i*sy + j*sx + k] += v;
}

float get_dL_dW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return dL_dW[n*sn + i*sy + j*sx + k];
}

float getMW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return MW[n*sn + i*sy + j*sx + k];
}

void setMW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	MW[n*sn + i*sy + j*sx + k] = v;
}

float getVW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return VW[n*sn + i*sy + j*sx + k];
}

void setVW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	VW[n*sn + i*sy + j*sx + k] = v;
}

void convBackpropUpdateW(uint f, uint fi, uint fj, uint xk)
{
	// Adam Update
	float alpha   = state_adam_alpha;
	float beta1   = state_adam_beta1;
	float beta2   = state_adam_beta2;
	float beta1t  = state_adam_beta1t;
	float beta2t  = state_adam_beta2t;
	float epsilon = 0.00001;
	float g       = get_dL_dW(f, fi, fj, xk);
	float m       = beta1*getMW(f, fi, fj, xk) +
	                (1.0 - beta1)*g;
	float v       = beta2*getVW(f, fi, fj, xk) +
	                (1.0 - beta2)*g*g;
	float w       = getW(f, fi, fj, xk);
	float m_hat   = m/(1.0 - beta1t);
	float v_hat   = v/(1.0 - beta2t);
	setMW(f, fi, fj, xk, m);
	setVW(f, fi, fj, xk, v);
	addW(f, fi, fj, xk, -alpha*m_hat/(sqrt(v_hat) + epsilon));
}

void main()
{
	// dispatch(RAW, fc, fh, fw, 4, 4, 4)
	uint f  = gl_GlobalInvocationID.x;
	uint fi = gl_GlobalInvocationID.y;
	uint fj = gl_GlobalInvocationID.z;
	uint fc = dimW.count;
	uint fh = dimW.height;
	uint fw = dimW.width;
	uint xd = dimW.depth;

	if((f >= fc) || (fi >= fh) || (fj >= fw))
	{
		return;
	}

	uint xk;
	for(xk = 0; xk < xd; ++xk)
	{
		convBackpropUpdateW(f, fi, fj, xk);
	}
}
