#version 450

layout (local_size_x=4, local_size_y=4, local_size_z=4) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_learning_rate;
	float state_momentum_decay;
	float state_batch_momentum;
	float state_l2_lambda;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
};

layout(std430, set=0, binding=4) readonly buffer sb04
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=5) buffer sb05
{
	float W[];
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	nn_dim_t dim_dL_dW;
};

layout(std430, set=2, binding=3) readonly buffer sb23
{
	float dL_dW[];
};

layout(std430, set=2, binding=8) readonly buffer sb28
{
	nn_dim_t dimVW;
};

layout(std430, set=2, binding=9) buffer sb29
{
	float VW[];
};

float getW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

void addW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	W[n*sn + i*sy + j*sx + k] += v;
}

float get_dL_dW(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dW.height*dim_dL_dW.width*dim_dL_dW.depth;
	uint sy = dim_dL_dW.width*dim_dL_dW.depth;
	uint sx = dim_dL_dW.depth;
	return dL_dW[n*sn + i*sy + j*sx + k];
}

float getVW(uint n, uint i, uint j, uint k)
{
	uint sn = dimVW.height*dimVW.width*dimVW.depth;
	uint sy = dimVW.width*dimVW.depth;
	uint sx = dimVW.depth;
	return VW[n*sn + i*sy + j*sx + k];
}

void setVW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimVW.height*dimVW.width*dimVW.depth;
	uint sy = dimVW.width*dimVW.depth;
	uint sx = dimVW.depth;
	VW[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// dispatch(RAW, fc, fh, fw, 4, 4, 4)
	uint  f      = gl_GlobalInvocationID.x;
	uint  fi     = gl_GlobalInvocationID.y;
	uint  fj     = gl_GlobalInvocationID.z;
	uint  fc     = dimW.count;
	uint  fh     = dimW.height;
	uint  fw     = dimW.width;
	uint  xd     = dimW.depth;
	float lr     = state_learning_rate;
	float mu     = state_momentum_decay;
	float lambda = state_l2_lambda;
	float s      = 1.0/(float(state_bs));

	if((f >= fc) || (fi >= fh) || (fj >= fw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		float dl_dw = s*get_dL_dW(f, fi, fj, k);
		float w     = getW(f, fi, fj, k);

		// Nesterov Momentum Update and L2 Regularization
		float v0  = getVW(f, fi, fj, k);
		float v1  = mu*v0 - lr*(dl_dw + 2.0*lambda*w);
		setVW(f, fi, fj, k, v1);
		addW(f, fi, fj, k, -mu*v0 + (1.0 + mu)*v1);
	}
}
