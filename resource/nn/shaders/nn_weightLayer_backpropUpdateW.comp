#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

layout(std430, set=0, binding=4) readonly buffer sb04
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=5) buffer sb05
{
	float W[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	float gc_gcw;
	float gc_gcb;
	float gc_norm_w;
	float gc_norm_b;
	float gc_norm_dl_dw;
	float gc_norm_dl_db;
	float gc_norm_dl_dw_ra;
	float gc_norm_dl_db_ra;
};

layout(std430, set=2, binding=3) readonly buffer sb23
{
	nn_dim_t dim_dL_dW;
};

layout(std430, set=2, binding=4) readonly buffer sb24
{
	float dL_dW[];
};

layout(std430, set=2, binding=8) buffer sb28
{
	float MW[];
};

layout(std430, set=2, binding=9) buffer sb29
{
	float VW[];
};

float getW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

void addW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	W[n*sn + i*sy + j*sx + k] += v;
}

float get_dL_dW(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dW.height*dim_dL_dW.width*dim_dL_dW.depth;
	uint sy = dim_dL_dW.width*dim_dL_dW.depth;
	uint sx = dim_dL_dW.depth;
	return dL_dW[n*sn + i*sy + j*sx + k];
}

float getMW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return MW[n*sn + i*sy + j*sx + k];
}

void setMW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	MW[n*sn + i*sy + j*sx + k] = v;
}

float getVW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return VW[n*sn + i*sy + j*sx + k];
}

void setVW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	VW[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// dispatch(RAW, nc, 1, 1, 64, 1, 1)
	uint n  = gl_GlobalInvocationID.x;
	uint nc = dimW.count;
	uint xd = dimW.depth;

	if(n >= nc)
	{
		return;
	}

	float alpha   = state_adam_alpha;
	float beta1   = state_adam_beta1;
	float beta2   = state_adam_beta2;
	float beta1t  = state_adam_beta1t;
	float beta2t  = state_adam_beta2t;
	float lambda  = state_adam_lambda;
	float nu      = state_adam_nu;
	float epsilon = 0.00001;

	uint k;
	for(k = 0; k < xd; ++k)
	{
		// Adam Update
		float gt     = get_dL_dW(n, 0, 0, k);
		float mt     = beta1*getMW(n, 0, 0, k) +
		               (1.0 - beta1)*gt;
		float vt     = beta2*getVW(n, 0, 0, k) +
		               (1.0 - beta2)*gt*gt;
		float wt     = getW(n, 0, 0, k);
		float mt_hat = mt/(1.0 - beta1t);
		float vt_hat = vt/(1.0 - beta2t);
		setMW(n, 0, 0, k, mt);
		setVW(n, 0, 0, k, vt);
		addW(n, 0, 0, k,
		     -nu*(alpha*mt_hat/(sqrt(vt_hat) + epsilon) +
		     lambda*wt));
	}
}
