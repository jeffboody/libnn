#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_sgd_alpha;
	float state_sgd_beta1;
	float state_sgd_l2_lambda;
	float state_bn_momentum;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
	float state_lerp_s;
	float state_lerp_min;
	float state_lerp_max;
};

layout(std430, set=0, binding=4) readonly buffer sb04
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=5) buffer sb05
{
	float W[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	float gc_gcw;
	float gc_gcb;
	float gc_norm_w;
	float gc_norm_b;
	float gc_norm_dl_dw;
	float gc_norm_dl_db;
	float gc_norm_dl_dw_ra;
	float gc_norm_dl_db_ra;
};

layout(std430, set=2, binding=3) readonly buffer sb23
{
	nn_dim_t dim_dL_dW;
};

layout(std430, set=2, binding=4) readonly buffer sb24
{
	float dL_dW[];
};

layout(std430, set=2, binding=9) readonly buffer sb29
{
	nn_dim_t dimVW;
};

layout(std430, set=2, binding=10) buffer sb210
{
	float VW[];
};

float getW(uint n, uint i, uint j, uint k)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

void addW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	W[n*sn + i*sy + j*sx + k] += v;
}

float get_dL_dW(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dW.height*dim_dL_dW.width*dim_dL_dW.depth;
	uint sy = dim_dL_dW.width*dim_dL_dW.depth;
	uint sx = dim_dL_dW.depth;
	return dL_dW[n*sn + i*sy + j*sx + k];
}

float getVW(uint n, uint i, uint j, uint k)
{
	uint sn = dimVW.height*dimVW.width*dimVW.depth;
	uint sy = dimVW.width*dimVW.depth;
	uint sx = dimVW.depth;
	return VW[n*sn + i*sy + j*sx + k];
}

void setVW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimVW.height*dimVW.width*dimVW.depth;
	uint sy = dimVW.width*dimVW.depth;
	uint sx = dimVW.depth;
	VW[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// dispatch(RAW, nc, 1, 1, 64, 1, 1)
	uint  n  = gl_GlobalInvocationID.x;
	uint  nc = dimW.count;
	uint  xd = dimW.depth;
	float s  = 1.0/(float(state_bs));

	if(n >= nc)
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		float dl_dw = s*get_dL_dW(n, 0, 0, k);
		float w     = getW(n, 0, 0, k);

		// Nesterov Momentum Update and L2 Regularization
		float v0  = getVW(n, 0, 0, k);
		float v1  = state_sgd_beta1*v0 -
		            state_sgd_alpha*(gc_gcw*dl_dw +
		            2.0*state_sgd_l2_lambda*w);
		setVW(n, 0, 0, k, v1);
		addW(n, 0, 0, k, -state_sgd_beta1*v0 +
		                 (1.0 + state_sgd_beta1)*v1);
	}
}
