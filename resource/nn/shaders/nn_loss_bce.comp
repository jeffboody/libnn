#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float loss_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	uint bs;
};

layout(std430, set=0, binding=1) writeonly buffer sb001
{
	float loss;
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	nn_dim_t dimY;
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	float Y[];
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	float Yt[];
};

float getY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return Y[n*sn + i*sy + j*sx + k];
}

float getYt(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return Yt[n*sn + i*sy + j*sx + k];
}

float log10(float x)
{
	return log(x)/log(10.0);
}

float loss_bce(uint m, uint i, uint j, uint k)
{
	float epsilon = 1.192092896e-07;

	float y;
	float yt;

	y  = getY(m, i, j, k);
	y  = clamp(y, epsilon, 1.0 - epsilon);
	yt = getYt(m, i, j, k);
	return -yt*log(y) - (1.0 - yt)*log(1.0 - y);
}

void main()
{
	// dispatch(RAW, 1, 1, 1, 8, 8, 1)
	uint p   = gl_GlobalInvocationID.x;
	uint q   = gl_GlobalInvocationID.y;
	uint yh  = dimY.height;
	uint yw  = dimY.width;
	uint yd  = dimY.depth;
	uint idx = 8*p + q;

	loss_work[idx] = 0.0;

	// compute working loss
	uint m;
	uint i;
	uint j;
	uint k;
	for(m = 0; m < bs; ++m)
	{
		for(i = p; i < yh; i += 8)
		{
			for(j = q; j < yw; j += 8)
			{
				for(k = 0; k < yd; ++k)
				{
					loss_work[idx] += loss_bce(m, i, j, k);
				}
			}
		}
	}
	memoryBarrierShared();
	barrier();

	// compute final loss
	if(idx == 0)
	{
		float sum = 0.0;
		float M   = float(bs*yh*yw*yd);

		uint n;
		for(n = 0; n < 64; ++n)
		{
			sum += loss_work[n];
		}

		loss = sum/M;
	}
}
