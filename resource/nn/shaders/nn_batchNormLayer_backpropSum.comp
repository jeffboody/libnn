#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float dl_dg_work[64];
shared float dl_db_work[64];
shared float bsum_work[64];
shared float csum_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
	float state_lerp_s;
	float state_lerp_min;
	float state_lerp_max;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	nn_dim_t dimXhat;
};

layout(std430, set=0, binding=2) readonly buffer sb02
{
	float Xhat[];
};

layout(std430, set=0, binding=4) buffer sb04
{
	float G[];
};

layout(std430, set=0, binding=6) buffer sb06
{
	float B[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	nn_dim_t dim_dL_dXhat;
};

layout(std430, set=2, binding=1) readonly buffer sb21
{
	float dL_dXhat[];
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=2, binding=3) readonly buffer sb23
{
	float dL_dY[];
};

layout(std430, set=2, binding=5) writeonly buffer sb25
{
	float Bsum[];
};

layout(std430, set=2, binding=7) writeonly buffer sb27
{
	float Csum[];
};

layout(std430, set=2, binding=8) buffer sb28
{
	float MG[];
};

layout(std430, set=2, binding=9) buffer sb29
{
	float VG[];
};

layout(std430, set=2, binding=10) buffer sb210
{
	float MB[];
};

layout(std430, set=2, binding=11) buffer sb211
{
	float VB[];
};

layout(std430, set=3, binding=0) readonly buffer sb30
{
	uint idx_k;
};

float getXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dimXhat.height*dimXhat.width*dimXhat.depth;
	uint sy = dimXhat.width*dimXhat.depth;
	uint sx = dimXhat.depth;
	return Xhat[n*sn + i*sy + j*sx + k];
}

float getG(uint n)
{
	return G[n];
}

void addG(uint n, float v)
{
	G[n] += v;
}

float getB(uint n)
{
	return B[n];
}

void addB(uint n, float v)
{
	B[n] += v;
}

float get_dL_dXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dXhat.height*dim_dL_dXhat.width*
	          dim_dL_dXhat.depth;
	uint sy = dim_dL_dXhat.width*dim_dL_dXhat.depth;
	uint sx = dim_dL_dXhat.depth;
	return dL_dXhat[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void setBsum(uint n, float v)
{
	Bsum[n] = v;
}

void setCsum(uint n, float v)
{
	Csum[n] = v;
}

float getMG(uint n)
{
	return MG[n];
}

void setMG(uint n, float v)
{
	MG[n] = v;
}

float getVG(uint n)
{
	return VG[n];
}

void setVG(uint n, float v)
{
	VG[n] = v;
}

float getMB(uint n)
{
	return MB[n];
}

void setMB(uint n, float v)
{
	MB[n] = v;
}

float getVB(uint n)
{
	return VB[n];
}

void setVB(uint n, float v)
{
	VB[n] = v;
}

void main()
{
	// dispatch required for each k
	// dispatch((k == 0) ? RAW : NONE, 1, 1, 1, 8, 8, 1)
	uint p   = gl_GlobalInvocationID.x;
	uint q   = gl_GlobalInvocationID.y;
	uint xh  = dimXhat.height;
	uint xw  = dimXhat.width;
	uint idx = 8*p + q;
	uint k   = idx_k;

	// initialize working sums
	dl_dg_work[idx] = 0.0;
	dl_db_work[idx] = 0.0;
	bsum_work[idx]  = 0.0;
	csum_work[idx]  = 0.0;

	// compute working sums
	uint  m;
	uint  i;
	uint  j;
	float dl_dy;
	float xhat;
	float dl_dxhat;
	for(m = 0; m < state_bs; ++m)
	{
		for(i = p; i < xh; i += 8)
		{
			for(j = q; j < xw; j += 8)
			{
				dl_dy            = get_dL_dY(m, i, j, k);
				xhat             = getXhat(m, i, j, k);
				dl_dxhat         = get_dL_dXhat(m, i, j, k);
				dl_dg_work[idx] += dl_dy*xhat;
				dl_db_work[idx] += dl_dy;
				bsum_work[idx]  += dl_dxhat;
				csum_work[idx]  += dl_dxhat*xhat;
			}
		}
	}

	// synchronize work
	memoryBarrierShared();
	barrier();

	// compute final sums, update G and update B
	if(idx == 0)
	{
		float dl_dg = 0.0;
		float dl_db = 0.0;
		float bsum  = 0.0;
		float csum  = 0.0;

		uint n;
		for(n = 0; n < 64; ++n)
		{
			dl_dg += dl_dg_work[n];
			dl_db += dl_db_work[n];
			bsum  += bsum_work[n];
			csum  += csum_work[n];
		}
		setBsum(k, bsum);
		setCsum(k, csum);

		// Adam Parameters
		float alpha   = state_adam_alpha;
		float beta1   = state_adam_beta1;
		float beta2   = state_adam_beta2;
		float beta1t  = state_adam_beta1t;
		float beta2t  = state_adam_beta2t;
		float lambda  = state_adam_lambda;
		float nu      = state_adam_nu;
		float epsilon = 0.00001;
		float gt;
		float mt;
		float vt;
		float g;
		float b;
		float mt_hat;
		float vt_hat;

		// Adam Update for G
		gt     = dl_dg;
		mt     = beta1*getMG(k) + (1.0 - beta1)*gt;
		vt     = beta2*getVG(k) + (1.0 - beta2)*gt*gt;
		g      = getG(k);
		mt_hat = mt/(1.0 - beta1t);
		vt_hat = vt/(1.0 - beta2t);
		setMG(k, mt);
		setVG(k, vt);
		addG(k, -nu*(alpha*mt_hat/(sqrt(vt_hat) + epsilon) +
		             lambda*g));

		// Adam Update for B
		gt     = dl_db;
		mt     = beta1*getMB(k) + (1.0 - beta1)*gt;
		vt     = beta2*getVB(k) + (1.0 - beta2)*gt*gt;
		b      = getB(k);
		mt_hat = mt/(1.0 - beta1t);
		vt_hat = vt/(1.0 - beta2t);
		setMB(k, mt);
		setVB(k, vt);
		addB(k, -nu*(alpha*mt_hat/(sqrt(vt_hat) + epsilon) +
		             lambda*b));
	}
}
