#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float dl_dg_work[64];
shared float dl_db_work[64];
shared float bsum_work[64];
shared float csum_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	float arch_learning_rate;
	float arch_momentum_decay;
	float arch_batch_momentum;
	float arch_l2_lambda;
	float arch_clip_max;
	float arch_clip_momentum;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	uint param_bs;
	uint param_stride;
	uint param_disable_bias;
};

layout(std430, set=1, binding=0) readonly buffer sb10
{
	uint idx_f;
	uint idx_fi;
	uint idx_fj;
	uint idx_k;
};

layout(std430, set=1, binding=1) readonly buffer sb11
{
	nn_dim_t dimXhat;
};

layout(std430, set=1, binding=2) readonly buffer sb12
{
	float Xhat[];
};

layout(std430, set=1, binding=3) readonly buffer sb13
{
	nn_dim_t dimG;
};

layout(std430, set=1, binding=4) writeonly buffer sb14
{
	float G[];
};

layout(std430, set=1, binding=5) readonly buffer sb15
{
	nn_dim_t dimB;
};

layout(std430, set=1, binding=6) writeonly buffer sb16
{
	float B[];
};

layout(std430, set=3, binding=0) readonly buffer sb30
{
	nn_dim_t dim_dL_dXhat;
};

layout(std430, set=3, binding=1) readonly buffer sb31
{
	float dL_dXhat[];
};

layout(std430, set=3, binding=2) readonly buffer sb32
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=3, binding=3) readonly buffer sb33
{
	float dL_dY[];
};

layout(std430, set=3, binding=4) readonly buffer sb34
{
	nn_dim_t dimBsum;
};

layout(std430, set=3, binding=5) writeonly buffer sb35
{
	float Bsum[];
};

layout(std430, set=3, binding=6) readonly buffer sb36
{
	nn_dim_t dimCsum;
};

layout(std430, set=3, binding=7) writeonly buffer sb37
{
	float Csum[];
};

float getXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dimXhat.height*dimXhat.width*dimXhat.depth;
	uint sy = dimXhat.width*dimXhat.depth;
	uint sx = dimXhat.depth;
	return Xhat[n*sn + i*sy + j*sx + k];
}

void setG(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimG.height*dimG.width*dimG.depth;
	uint sy = dimG.width*dimG.depth;
	uint sx = dimG.depth;
	G[n*sn + i*sy + j*sx + k] = v;
}

void setB(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimB.height*dimB.width*dimB.depth;
	uint sy = dimB.width*dimB.depth;
	uint sx = dimB.depth;
	B[n*sn + i*sy + j*sx + k] = v;
}

float get_dL_dXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dXhat.height*dim_dL_dXhat.width*
	          dim_dL_dXhat.depth;
	uint sy = dim_dL_dXhat.width*dim_dL_dXhat.depth;
	uint sx = dim_dL_dXhat.depth;
	return dL_dXhat[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void setBsum(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimBsum.height*dimBsum.width*dimBsum.depth;
	uint sy = dimBsum.width*dimBsum.depth;
	uint sx = dimBsum.depth;
	Bsum[n*sn + i*sy + j*sx + k] = v;
}

void setCsum(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimCsum.height*dimCsum.width*dimCsum.depth;
	uint sy = dimCsum.width*dimCsum.depth;
	uint sx = dimCsum.depth;
	Csum[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// dispatch required for each k
	// dispatch((k == 0) ? RAW : NONE, 1, 1, 1, 8, 8, 1)
	uint p   = gl_GlobalInvocationID.x;
	uint q   = gl_GlobalInvocationID.y;
	uint xh  = dimXhat.height;
	uint xw  = dimXhat.width;
	uint xd  = dimXhat.depth;
	uint idx = 8*p + q;
	uint k   = idx_k;

	// initialize working sums
	dl_dg_work[idx] = 0.0;
	dl_db_work[idx] = 0.0;
	bsum_work[idx]  = 0.0;
	csum_work[idx]  = 0.0;

	// compute working sums
	uint  m;
	uint  i;
	uint  j;
	float dl_dy;
	float xhat;
	float dl_dxhat;
	for(m = 0; m < param_bs; ++m)
	{
		for(i = p; i < xh; i += 8)
		{
			for(j = q; j < xw; j += 8)
			{
				dl_dy            = get_dL_dY(m, i, j, k);
				xhat             = getXhat(m, i, j, k);
				dl_dxhat         = get_dL_dXhat(m, i, j, k);
				dl_dg_work[idx] += dl_dy*xhat;
				dl_db_work[idx] += dl_dy;
				bsum_work[idx]  += dl_dxhat;
				csum_work[idx]  += dl_dxhat*xhat;
			}
		}
	}

	// synchronize work
	memoryBarrierShared();
	barrier();

	// compute final sums
	if(idx == 0)
	{
		float dl_dg = 0.0;
		float dl_db = 0.0;
		float bsum  = 0.0;
		float csum  = 0.0;

		uint n;
		for(n = 0; n < 64; ++n)
		{
			dl_dg += dl_dg_work[n];
			dl_db += dl_db_work[n];
			bsum  += bsum_work[n];
			csum  += csum_work[n];
		}
		setBsum(0, 0, 0, k, bsum);
		setCsum(0, 0, 0, k, csum);

		// update G and B
		setG(0, 0, 0, k, -arch_learning_rate*dl_dg);
		setB(0, 0, 0, k, -arch_learning_rate*dl_db);
	}
}
