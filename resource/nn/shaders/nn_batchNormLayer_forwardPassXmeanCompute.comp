#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

shared float xmean_mb_work[64];

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=9) writeonly buffer sb009
{
	float Xmean_mb[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float X[];
};

layout(std430, set=2, binding=0) readonly buffer sb200
{
	uint idx_k;
};

float getX(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

void set_Xmean_mb(uint n, float v)
{
	Xmean_mb[n] = v;
}

void main()
{
	// dispatch required for each k
	// dispatch(RAW, 1, 1, 1, 8, 8, 1)
	uint p   = gl_GlobalInvocationID.x;
	uint q   = gl_GlobalInvocationID.y;
	uint xh  = dimX.height;
	uint xw  = dimX.width;
	uint idx = 8*p + q;
	uint k   = idx_k;

	// initialize xmean_mb_work
	xmean_mb_work[idx] = 0.0;

	// compute xmean_mb_work
	uint m;
	uint i;
	uint j;
	for(m = 0; m < bs; ++m)
	{
		for(i = p; i < xh; i += 8)
		{
			for(j = q; j < xw; j += 8)
			{
				xmean_mb_work[idx] += getX(m, i, j, k);
			}
		}
	}
	memoryBarrierShared();
	barrier();

	// compute xmean_mb
	if(idx == 0)
	{
		float xmean_mb = 0.0;

		uint  n;
		float M = float(bs)*float(xh)*float(xw);
		for(n = 0; n < 64; ++n)
		{
			xmean_mb += xmean_mb_work[n];
		}
		xmean_mb /= M;
		set_Xmean_mb(k, xmean_mb);
	}
}
