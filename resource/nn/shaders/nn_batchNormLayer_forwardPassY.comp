#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	float G[];
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	float B[];
};

layout(std430, set=0, binding=3) readonly buffer sb003
{
	float Xhat[];
};

layout(std430, set=0, binding=4) writeonly buffer sb004
{
	float Y[];
};

float getXhat(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return Xhat[n*sn + i*sy + j*sx + k];
}

float getG(uint n)
{
	return G[n];
}

float getB(uint n)
{
	return B[n];
}

void setY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	Y[n*sn + i*sy + j*sx + k] = v;
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint xd = dimX.depth;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint  k;
	float gamma;
	float beta;
	float xhat;
	float y;
	for(k = 0; k < xd; ++k)
	{
		gamma = getG(k);
		beta  = getB(k);
		xhat  = getXhat(m, i, j, k);
		y     = gamma*xhat + beta;
		setY(m, i, j, k, y);
	}
}
