#version 450

layout (local_size_x=1, local_size_y=8, local_size_z=8) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_sgd_alpha;
	float state_sgd_beta1;
	float state_sgd_l2_lambda;
	float state_bn_momentum;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
	float state_lerp_s;
	float state_lerp_min;
	float state_lerp_max;
};

layout(std430, set=0, binding=1) readonly buffer sb01
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=2) readonly buffer sb02
{
	float X[];
};

layout(std430, set=2, binding=0) readonly buffer sb20
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=2, binding=1) buffer sb21
{
	float dL_dY[];
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	nn_dim_t dimX2;
};

layout(std430, set=2, binding=3) buffer sb23
{
	float X2[];
};

layout(std430, set=2, binding=4) buffer sb24
{
	float lerp_s1;
	float lerp_s2;
};

float getX1(uint n, uint i, uint j, uint k)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float getX2(uint n, uint i, uint j, uint k)
{
	uint sn = dimX2.height*dimX2.width*dimX2.depth;
	uint sy = dimX2.width*dimX2.depth;
	uint sx = dimX2.depth;
	return X2[n*sn + i*sy + j*sx + k];
}

void mul_dL_dY(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	dL_dY[n*sn + i*sy + j*sx + k] *= v;
}

void backpropLERP(uint m, uint i, uint j, uint k)
{
	float y1    = getX1(m, i, j, k);
	float y2    = getX2(m, i, j, k);
	float dy_dx = 1.0;
	if(y1 < 0.0)
	{
		y1    = 0.0;
		dy_dx = 0.0;
	}
	if(y2 < 0.0)
	{
		y2 = 0.0;
	}

	float H = lerp_s1*y1 + lerp_s2*y2;
	float s = clamp((y1 + state_lerp_s*(H - y1))/y1,
	                state_lerp_min, state_lerp_max);

	// dL_dY replaced by dL_dX
	mul_dL_dY(m, i, j, k, s*dy_dx);
}

void main()
{
	// dispatch(RAW, bs, xh, xw, 1, 8, 8)
	uint m  = gl_GlobalInvocationID.x;
	uint i  = gl_GlobalInvocationID.y;
	uint j  = gl_GlobalInvocationID.z;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint xd = dimX.depth;

	if((i >= xh) || (j >= xw))
	{
		return;
	}

	uint k;
	for(k = 0; k < xd; ++k)
	{
		backpropLERP(m, i, j, k);
	}
}
