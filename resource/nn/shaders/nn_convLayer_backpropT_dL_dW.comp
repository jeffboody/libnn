#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=10) writeonly buffer sb010
{
	float dL_dW[];
};

layout(std430, set=0, binding=13) readonly buffer sb013
{
	uint param_disable_bias;
	uint param_stride;
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_bn_momentum;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float X[];
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float dL_dY[];
};

float get_dY_dW(uint n, uint i, uint j, uint k)
{
	// X is dY_dW
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	dL_dW[n*sn + i*sy + j*sx + k] = v;
}

void convTBackprop_dL_dW(uint f, uint fi, uint fj, uint xk)
{
	float dl_dw = 0.0;

	uint fh = dimW.height;
	uint fw = dimW.width;
	uint xh = dimX.height;
	uint xw = dimX.width;
	uint yh = dimY.height;
	uint yw = dimY.width;

	uint  m;
	uint  xi;
	uint  xj;
	int   yi;
	int   yj;
	float dl_dy;
	float dy_dw;
	for(m = 0; m < bs; m++)
	{
		for(xi = 0; xi < xh; xi++)
		{
			yi = int(xi*param_stride) + int(fi) - int(fh/2);
			if((yi < 0) || (yi >= yh))
			{
				continue;
			}

			for(xj = 0; xj < xw; xj++)
			{
				yj = int(xj*param_stride) + int(fj) - int(fw/2);
				if((yj < 0) || (yj >= yw))
				{
					continue;
				}

				dl_dy  = get_dL_dY(m, yi, yj, f);
				dy_dw  = get_dY_dW(m, xi, xj, xk);
				dl_dw += dl_dy*dy_dw;
			}
		}
	}
	set_dL_dW(f, fi, fj, xk, dl_dw);
}

void main()
{
	// dispatch(RAW, fc, xd, 1, 8, 8, 1)
	uint f  = gl_GlobalInvocationID.x;
	uint xk = gl_GlobalInvocationID.y;
	uint fc = dimW.count;
	uint fh = dimW.height;
	uint fw = dimW.width;
	uint xd = dimX.depth;

	if((f >= fc) || (xk >= xd))
	{
		return;
	}

	uint fi;
	uint fj;
	for(fi = 0; fi < fh; ++fi)
	{
		for(fj = 0; fj < fw; ++fj)
		{
			convTBackprop_dL_dW(f, fi, fj, xk);
		}
	}
}
