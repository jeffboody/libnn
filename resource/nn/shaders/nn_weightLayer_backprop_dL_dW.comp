#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=10) writeonly buffer sb010
{
	float dL_dW[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
};

layout(std430, set=1, binding=2) readonly buffer sb102
{
	float X[];
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float dL_dY[];
};

float get_dY_dW(uint n, uint i, uint j, uint k)
{
	// X is dY_dW
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	return X[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dW(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	dL_dW[n*sn + i*sy + j*sx + k] = v;
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

void main()
{
	// RAW hazard handled by nn_weightLayer_backprop_dL_dX
	// dispatch(NONE, nc*xd, 1, 1, 64, 1, 1)
	uint i  = gl_GlobalInvocationID.x;
	uint nc = dimW.count;
	uint xd = dimW.depth;
	uint n  = i/xd;
	uint k  = umod(i, xd);

	if(n >= nc)
	{
		return;
	}

	// initialize dl_dw
	float dl_dw = 0.0;

	// compute dl_dw
	uint  m;
	float dl_dy;
	float dy_dw;
	for(m = 0; m < bs; ++m)
	{
		dl_dy = get_dL_dY(m, 0, 0, n);
		dy_dw = get_dY_dW(m, 0, 0, k);
		dl_dw += dl_dy*dy_dw;
	}

	set_dL_dW(n, 0, 0, k, dl_dw);
}
