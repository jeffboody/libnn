#version 450

layout (local_size_x=8, local_size_y=8, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb000
{
	nn_dim_t dimX;
};

layout(std430, set=0, binding=1) readonly buffer sb001
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=2) readonly buffer sb002
{
	float W[];
};

layout(std430, set=0, binding=4) readonly buffer sb004
{
	nn_dim_t dimY;
};

layout(std430, set=0, binding=12) writeonly buffer sb012
{
	float dL_dX[];
};

layout(std430, set=1, binding=0) readonly buffer sb100
{
	uint bs;
};

layout(std430, set=1, binding=1) readonly buffer sb101
{
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_bn_momentum;
};

layout(std430, set=1, binding=3) readonly buffer sb103
{
	float dL_dY[];
};

float get_dY_dX(uint n, uint i, uint j, uint k)
{
	// dY_dX is W
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dimY.height*dimY.width*dimY.depth;
	uint sy = dimY.width*dimY.depth;
	uint sx = dimY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void set_dL_dX(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dimX.height*dimX.width*dimX.depth;
	uint sy = dimX.width*dimX.depth;
	uint sx = dimX.depth;
	dL_dX[n*sn + i*sy + j*sx + k] = v;
}

void weightBackprop_dL_dX(uint m, uint xk)
{
	float dl_dx = 0.0;

	uint nc = dimW.count;

	uint  n;
	float dl_dy;
	float dy_dx;
	for(n = 0; n < nc; ++n)
	{
		dl_dy  = get_dL_dY(m, 0, 0, n);
		dy_dx  = get_dY_dX(n, 0, 0, xk);
		dl_dx += dl_dy*dy_dx;
	}

	set_dL_dX(m, 0, 0, xk, dl_dx);
}

void main()
{
	// dispatch(RAW, bs, xd, 1, 8, 8, 1)
	uint m  = gl_GlobalInvocationID.x;
	uint xk = gl_GlobalInvocationID.y;
	uint xd = dimW.depth;

	if((m >= bs) || (xk >= xd))
	{
		return;
	}

	weightBackprop_dL_dX(m, xk);
}
