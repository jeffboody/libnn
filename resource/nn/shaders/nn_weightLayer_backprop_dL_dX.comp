#version 450

layout (local_size_x=64, local_size_y=1, local_size_z=1) in;

struct nn_dim_t
{
	uint count;
	uint height;
	uint width;
	uint depth;
};

layout(std430, set=0, binding=0) readonly buffer sb00
{
	uint  state_bs;
	float state_adam_alpha;
	float state_adam_beta1;
	float state_adam_beta2;
	float state_adam_beta1t;
	float state_adam_beta2t;
	float state_adam_lambda;
	float state_adam_nu;
	float state_bn_momentum;
	float state_gan_blend_factor;
	float state_gan_blend_scalar;
	float state_gan_blend_min;
	float state_gan_blend_max;
};

layout(std430, set=0, binding=4) readonly buffer sb04
{
	nn_dim_t dimW;
};

layout(std430, set=0, binding=5) readonly buffer sb05
{
	float W[];
};

layout(std430, set=2, binding=1) readonly buffer sb21
{
	nn_dim_t dim_dL_dY;
};

layout(std430, set=2, binding=2) readonly buffer sb22
{
	float dL_dY[];
};

layout(std430, set=2, binding=7) readonly buffer sb27
{
	nn_dim_t dim_dL_dX;
};

layout(std430, set=2, binding=8) buffer sb28
{
	float dL_dX[];
};

float get_dY_dX(uint n, uint i, uint j, uint k)
{
	// dY_dX is W
	uint sn = dimW.height*dimW.width*dimW.depth;
	uint sy = dimW.width*dimW.depth;
	uint sx = dimW.depth;
	return W[n*sn + i*sy + j*sx + k];
}

float get_dL_dY(uint n, uint i, uint j, uint k)
{
	uint sn = dim_dL_dY.height*dim_dL_dY.width*dim_dL_dY.depth;
	uint sy = dim_dL_dY.width*dim_dL_dY.depth;
	uint sx = dim_dL_dY.depth;
	return dL_dY[n*sn + i*sy + j*sx + k];
}

void add_dL_dX(uint n, uint i, uint j, uint k, float v)
{
	uint sn = dim_dL_dX.height*dim_dL_dX.width*dim_dL_dX.depth;
	uint sy = dim_dL_dX.width*dim_dL_dX.depth;
	uint sx = dim_dL_dX.depth;
	dL_dX[n*sn + i*sy + j*sx + k] += v;
}

void backprop_dL_dX(uint m, uint k)
{
	uint nc = dimW.count;

	float dy_dx;
	float dl_dy;
	float dl_dx = 0.0;
	uint  n;
	for(n = 0; n < nc; ++n)
	{
		dl_dy  = get_dL_dY(m, 0, 0, n);
		dy_dx  = get_dY_dX(n, 0, 0, k);
		dl_dx += dl_dy*dy_dx;
	}

	add_dL_dX(m, 0, 0, k, dl_dx);
}

uint umod(uint x, uint y)
{
	return uint(mod(int(x), int(y)));
}

void main()
{
	// dispatch(RAW, bs*xd, 1, 1, 64, 1, 1)
	uint i  = gl_GlobalInvocationID.x;
	uint xd = dimW.depth;
	uint m  = i/xd;
	uint k  = umod(i, xd);

	if(m >= state_bs)
	{
		return;
	}

	backprop_dL_dX(m, k);
}
